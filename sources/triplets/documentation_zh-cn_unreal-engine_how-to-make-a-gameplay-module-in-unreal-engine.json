{
  "filename": "documentation_zh-cn_unreal-engine_how-to-make-a-gameplay-module-in-unreal-engine",
  "sourceFile": "C:\\Users\\yarnb\\unreal-engine-knowledge-graph-mcp\\sources\\docs\\documentation_zh-cn_unreal-engine_how-to-make-a-gameplay-module-in-unreal-engine.md",
  "triples": [
    {
      "subject": "虚幻引擎模块",
      "predicate": "用于",
      "object": "组织代码",
      "context": "模块化开发是虚幻引擎的核心组织方式，理解模块概念是学习引擎架构的基础",
      "direction": "unidirectional",
      "confidence": 0.9
    },
    {
      "subject": "虚幻引擎模块",
      "predicate": "缩短",
      "object": "编译时间",
      "context": "模块化编译是大型项目开发的关键优化手段",
      "direction": "unidirectional",
      "confidence": 0.9
    },
    {
      "subject": "主模块",
      "predicate": "包含",
      "object": "MyProject.Build.cs",
      "context": "主模块的构建配置文件是理解项目依赖关系的入口点",
      "direction": "unidirectional",
      "confidence": 0.9
    },
    {
      "subject": "模块目录结构",
      "predicate": "包含",
      "object": "Public/Private文件夹",
      "context": "头文件与实现文件的分离是C++模块的标准组织方式",
      "direction": "unidirectional",
      "confidence": 0.9
    },
    {
      "subject": "Build.cs文件",
      "predicate": "被",
      "object": "虚幻编译工具(UBT)识别",
      "context": "理解UBT如何发现和处理模块是构建系统学习的核心",
      "direction": "unidirectional",
      "confidence": 0.9
    },
    {
      "subject": "模块实现",
      "predicate": "基于",
      "object": "FDefaultModuleImpl",
      "context": "默认模块实现类是快速创建模块的基础模板",
      "direction": "unidirectional",
      "confidence": 0.9
    },
    {
      "subject": "模块编译",
      "predicate": "依赖",
      "object": "Visual Studio解决方案生成",
      "context": "IDE集成是C++开发工作流的重要环节",
      "direction": "unidirectional",
      "confidence": 0.9
    },
    {
      "subject": "模块注册",
      "predicate": "通过",
      "object": ".uproject文件",
      "context": "项目配置文件是模块管理系统的重要组成部分",
      "direction": "unidirectional",
      "confidence": 0.9
    },
    {
      "subject": "模块依赖",
      "predicate": "配置在",
      "object": "Build.cs文件",
      "context": "依赖管理是模块化开发的核心技能",
      "direction": "unidirectional",
      "confidence": 0.9
    },
    {
      "subject": "Gameplay模块",
      "predicate": "可以包含",
      "object": "可扩展的Actor类",
      "context": "创建可扩展的基类是模块化设计的高级应用",
      "direction": "unidirectional",
      "confidence": 0.9
    },
    {
      "subject": "模块测试",
      "predicate": "通过",
      "object": "蓝图派生类",
      "context": "验证模块可用性是开发流程的关键步骤",
      "direction": "unidirectional",
      "confidence": 0.9
    },
    {
      "subject": "Core模块",
      "predicate": "是",
      "object": "基础依赖模块",
      "context": "核心模块提供了最基本的引擎功能支持",
      "direction": "unidirectional",
      "confidence": 0.9
    },
    {
      "subject": "Engine模块",
      "predicate": "提供",
      "object": "运行时功能支持",
      "context": "引擎模块是Gameplay开发的主要依赖",
      "direction": "unidirectional",
      "confidence": 0.9
    },
    {
      "subject": "模块加载阶段",
      "predicate": "影响",
      "object": "初始化顺序",
      "context": "理解加载时序对解决复杂依赖问题很重要",
      "direction": "unidirectional",
      "confidence": 0.8
    },
    {
      "subject": "模块类型",
      "predicate": "决定",
      "object": "运行时可用性",
      "context": "区分Runtime和Editor模块是引擎架构的基础知识",
      "direction": "unidirectional",
      "confidence": 0.9
    },
    {
      "subject": "新建C++类向导",
      "predicate": "支持",
      "object": "跨模块类创建",
      "context": "编辑器工具链集成是实际开发中的重要功能",
      "direction": "unidirectional",
      "confidence": 0.9
    },
    {
      "subject": "模块开发",
      "predicate": "前置知识",
      "object": "C++项目创建",
      "context": "模块开发必须基于C++项目，这是基础前提条件",
      "direction": "unidirectional",
      "confidence": 0.9
    },
    {
      "subject": "模块化开发",
      "predicate": "促进",
      "object": "代码重用",
      "context": "这是学习模块化架构的主要价值之一",
      "direction": "unidirectional",
      "confidence": 0.8
    },
    {
      "subject": "模块依赖关系",
      "predicate": "影响",
      "object": "编译顺序",
      "context": "理解依赖关系对解决编译问题很重要",
      "direction": "unidirectional",
      "confidence": 0.8
    },
    {
      "subject": "模块实现文件",
      "predicate": "遵循",
      "object": "命名规范",
      "context": "遵守命名约定是大型项目协作的基础",
      "direction": "unidirectional",
      "confidence": 0.9
    }
  ],
  "timestamp": "2025-06-15T19:26:54.406Z",
  "warnings": [
    {
      "type": "large_file",
      "message": "文档内容较长，可能增加API调用成本 (8243 字符)",
      "timestamp": "2025-06-15T19:25:49.629Z"
    }
  ],
  "metadata": {
    "fileSize": 12743,
    "contentLength": 8243,
    "processingTimeMs": 64793
  }
}