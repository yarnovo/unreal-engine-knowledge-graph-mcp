{
  "filename": "documentation_zh-cn_unreal-engine_threaded-rendering-in-unreal-engine",
  "sourceFile": "C:\\Users\\yarnb\\unreal-engine-knowledge-graph-mcp\\sources\\docs\\documentation_zh-cn_unreal-engine_threaded-rendering-in-unreal-engine.md",
  "triples": [
    {
      "subject": "渲染线程",
      "predicate": "执行",
      "object": "渲染操作",
      "context": "渲染线程负责执行所有渲染操作，与游戏线程并行运行",
      "direction": "unidirectional",
      "confidence": 0.9
    },
    {
      "subject": "游戏线程",
      "predicate": "阻塞",
      "object": "渲染线程",
      "context": "游戏线程会在Tick()事件末尾阻塞，等待渲染线程追赶上一到两帧的差距",
      "direction": "unidirectional",
      "confidence": 0.9
    },
    {
      "subject": "UPrimitiveComponent",
      "predicate": "拥有",
      "object": "FPrimitiveSceneProxy",
      "context": "游戏线程的UPrimitiveComponent拥有对应的渲染线程FPrimitiveSceneProxy，用于线程安全的数据交互",
      "direction": "unidirectional",
      "confidence": 0.9
    },
    {
      "subject": "ENQUEUE_UNIQUE_RENDER_COMMAND",
      "predicate": "用于",
      "object": "线程间通讯",
      "context": "该宏是游戏线程与渲染线程间通讯的主要方法，通过命令队列实现异步通信",
      "direction": "unidirectional",
      "confidence": 0.9
    },
    {
      "subject": "FRenderCommandFence",
      "predicate": "追踪",
      "object": "渲染线程进度",
      "context": "游戏线程使用栅栏机制追踪渲染线程的命令处理进度",
      "direction": "unidirectional",
      "confidence": 0.9
    },
    {
      "subject": "FRenderResource",
      "predicate": "派生",
      "object": "FVertexBuffer/FIndexBuffer",
      "context": "基础渲染资源接口，所有具体渲染资源（如顶点/索引缓冲）都派生自它",
      "direction": "unidirectional",
      "confidence": 0.9
    },
    {
      "subject": "垃圾回收",
      "predicate": "影响",
      "object": "UObjects",
      "context": "GC在游戏线程上运行时会处理UObjects，需要注意渲染线程可能仍在引用这些对象",
      "direction": "unidirectional",
      "confidence": 0.9
    },
    {
      "subject": "USkeletalMesh",
      "predicate": "使用",
      "object": "静态资源处理机制",
      "context": "以骨骼网格体为例展示了静态资源的完整生命周期管理流程",
      "direction": "unidirectional",
      "confidence": 0.9
    },
    {
      "subject": "FSkeletalMeshObjectGPUSkin",
      "predicate": "处理",
      "object": "动态资源更新",
      "context": "展示了如何将游戏线程的骨骼变形数据安全传递到渲染线程",
      "direction": "unidirectional",
      "confidence": 0.9
    },
    {
      "subject": "FDeferredCleanupInterface",
      "predicate": "实现",
      "object": "线程安全删除",
      "context": "提供异步删除机制，确保渲染线程完成资源使用后再释放内存",
      "direction": "unidirectional",
      "confidence": 0.9
    },
    {
      "subject": "DrawDynamicElements",
      "predicate": "不应包含",
      "object": "状态更新",
      "context": "渲染遍历函数应该保持纯净，状态更新应该通过独立的渲染命令处理",
      "direction": "unidirectional",
      "confidence": 0.9
    },
    {
      "subject": "竞争条件",
      "predicate": "避免",
      "object": "线程安全设计",
      "context": "文档强调理解线程交互机制的重要性，这是避免竞争条件的核心",
      "direction": "unidirectional",
      "confidence": 0.9
    },
    {
      "subject": "游戏线程",
      "predicate": "拥有",
      "object": "UObjects状态",
      "context": "明确划分线程职责，游戏线程独占UObjects的状态管理",
      "direction": "unidirectional",
      "confidence": 0.9
    },
    {
      "subject": "渲染线程",
      "predicate": "拥有",
      "object": "FPrimitiveSceneProxy",
      "context": "渲染线程独占场景代理对象的管理，确保线程安全",
      "direction": "unidirectional",
      "confidence": 0.9
    },
    {
      "subject": "BeginInitResource",
      "predicate": "封装",
      "object": "资源初始化",
      "context": "游戏线程通过该函数安全地初始化渲染资源",
      "direction": "unidirectional",
      "confidence": 0.9
    },
    {
      "subject": "FlushRenderingCommands",
      "predicate": "实现",
      "object": "线程同步",
      "context": "强制游戏线程等待渲染线程的阻塞方法，主要用于编辑器操作",
      "direction": "unidirectional",
      "confidence": 0.9
    },
    {
      "subject": "DetachFence",
      "predicate": "防止",
      "object": "UObject提前回收",
      "context": "确保渲染线程完成处理前，游戏线程不会删除被引用的UObject",
      "direction": "unidirectional",
      "confidence": 0.9
    },
    {
      "subject": "静态资源",
      "predicate": "对比",
      "object": "动态资源",
      "context": "文档详细比较了两种资源类型的处理机制差异，这是理解渲染系统的关键",
      "direction": "bidirectional",
      "confidence": 0.9
    },
    {
      "subject": "状态缓存",
      "predicate": "例外",
      "object": "更新/渲染分离原则",
      "context": "作为优化手段，状态缓存可以与渲染遍历紧密结合",
      "direction": "unidirectional",
      "confidence": 0.9
    }
  ],
  "timestamp": "2025-06-15T21:01:42.048Z",
  "warnings": [],
  "metadata": {
    "fileSize": 13671,
    "contentLength": 7727,
    "processingTimeMs": 53756
  }
}